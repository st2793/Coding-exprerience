츌처 : https://programmers.co.kr/learn/courses/30/lessons/92342?language=python3
(카카오 2022 코딩테스트 양궁대회)

참조글 : https://black-hair.tistory.com/49

list_A = ["ABC","DEF"]

list_B = list_A

list_B.append("GHI")

print(list_A)
#결과 ["ABC","DEF","GHI"]

=> 리스트를 복사할 때에는 C 언어에서 포인터만 지정한 것과 비슷한 경우된다.

=>실제로 list는 1개만 존재하지만 2가지 이름으로 가르키는 것이다. 

이러한 복사에서 발생하는 문제점을 해결한 것이 Deep copy(깊은 복사)이다.
즉, 두 객체는 같은 값을 가진 완전히 다른 객체가 된다고 생각할 수 있다.
그래서 어느 한 쪽을 수정하더라도 다른 쪽에 영향을 주지 않게된다.

import copy

list_A = ["ABC",["DEF","GHI"]]

list_B = copy.deepcopy(list_A)

list_B[1][0] = ["GHI"]

print(list_A, list_B)
#결과 ['ABC', ['DEF', 'GHI']] ['ABC', [['GHI'], 'GHI']]

deepcopy의 경우 완벽한 복사를 할 수 있지만 새로운 곳에 생성하는 것 때문에 시간이 오래걸리고 메모리를 많이 사용한다는 단점이 존재한다.



2. 잘못된 코드
res=0
answer = [-1]

def DFS(L, n, info, info2):
    global res,answer
    if L>n:
        return
    elif L==n:
        #어피치 라이언 점수
        score=10
        A=0
        L=0
        for appeach, lion in zip(info,info2):
            if appeach>=lion and appeach!=0:
                A+=score
            elif appeach<lion and lion!=0:
                L+=score
            score-=1
        if L-A<res:
            return
        elif A>=L:
            return
        if A<L:
            if L-A>res:
                res=L-A
                #이렇게 하면 틀려!! 46라인 통해서 info2가 초깃값으로 초기화되서 answer도 결국  info2 초기화 값으로 초기화됨..
                #answer=info2
                #새로 만들어줘야함
                answer=[]
                for x in info2:
                    answer.append(x)
                

            elif L-A==res:
                for i in range(10,-1,-1):
                    if answer[i]<info2[i]:
                        #26라인과 동일
                        #answer=info2
                        for x in info2:
                            answer.append(x)
                        break                
    else:
        #for문은 비효율적임. 왜냐하면 같은 값이 계속 나올것이기때문. 1번째에 +1 3번쨰에 +3인경우 중복되어 여러차례 값이 나옴. 11개의 경우의수니까 오지게 많겠지? 
        for i in range(11):
            info2[i]+=1
            DFS(L+1, n, info, info2)
            info2[i]-=1

def solution(n, info):
    global answer
    info2=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    score=10
    DFS(0,n,info,info2)
    
    return answer
    
    
    
 3. 옳게 푼 코드
 #위와같이 풀면 44라인으로인해 비효율적이라 시간초과됨. 
from itertools import combinations_with_replacement
from collections import Counter

#중복조합 정리하자. 
def solution(n, info):
    max_diff, max_comb_cnt = 0, {}
    for comb in combinations_with_replacement(range(11), n):
        #print(comb)
        cnt=Counter(comb)
        score1, score2 = 0, 0
        for i in range(1,11):
            if info[10-i] < cnt[i]:
                #라이언
                score1+= i
            elif info[10-i]>0:
                score2+= i
        diff = score1 - score2
        #diff 같은 값 순서를 신경안써도 되는 이유 : combinations_with_replacement 에서 이미 작은 값 먼저 순차적으로 돌고 있음. 
        if diff > max_diff:
            max_comb_cnt = cnt
            max_diff=diff
    
    
    if max_diff>0:
        answer = [0]*11
        for n in max_comb_cnt:
            answer[10-n] = max_comb_cnt[n]
        return answer
    else:
        return [-1]
