# 자주 까먹는 코드..
# 활용도가 높으니 반드시 숙지하고 코테보러갈것. 
# intertools가 아니라 intertools인데 자꾸 오타를 내는 경향이 있음. 
# 순열, 조합 개념은 기본적이니 생략
# 라이브러리 활용, 비활용 순열 조합 구하기


1. 라이브러리 활용 순열
from itertools import permutations

dataset=['A','B','C']
res=list(permutations(dataset,2))
print(res)
=> [('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'C'), ('C', 'A'), ('C', 'B')]


2. 라이브러리 활용한 조합
from itertools import combinations
dataset = ['A', 'B', 'C']
res = list(combinations(dataset, 2))
print(res)
=> [('A', 'B'), ('A', 'C'), ('B', 'C')]



3. 라이브러리 활용한 중복순열

from itertools import product

dataset=['A','B','C']
# 2개를 뽑아 일렬로 나열하는 경우의 수(단, 중복 허용)
res=list(product(dataset, repeat=2))
print(res)
=> [('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'B'), ('B', 'C'), ('C', 'A'), ('C', 'B'), ('C', 'C')]


4. 라이브러리를 활용한 중복조합
from itertools import combinations_with_replacement

dataset=['A','B','C']
# 2개를 뽑을 수 있는 경우의 수(단, 중복 허용)
res=list(combinations_with_replacement(dataset, 2))
print(res)
=> [('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'B'), ('B', 'C'), ('C', 'C')]



5. 라이브러리 없이 재귀함수활용 순열
dataset=['A','B','C']
used=[0]*len(dataset)

def permutations(arr,n):
    if n==len(dataset):
        print(arr)
        return
    else: 
        for i in range(len(dataset)):
            if not used[i]:
                used[i]=1
                arr.append(dataset[i])
                permutations(arr,n+1)
                arr.pop()
                used[i]=0

permutations([],0)
#permutations([],len(dataset)-2) 이런식으로 표기하면 원하는 갯수의 수열 구할 수 있음
=> 
['A', 'B', 'C']
['A', 'C', 'B']
['B', 'A', 'C']
['B', 'C', 'A']
['C', 'A', 'B']
['C', 'B', 'A']


6. 라이브러리 없이 재귀함수활용 조합
dataset = ['a', 'b', 'c']
n = len(dataset)
r = 2
answer = []

def dfs(idx, list):
    # 전체를 돌았을 때
    if idx == n:
        # 해당 경우의 수의 요소 개수가 r개와 같다면
        if len(list) == r:
            # 답이다
            # print(list) 잘나오는데.. 
            # 왜 그냥 list는 answer.append하면 안되는지 잘모르겠다..
            answer.append(list[0::])
        #모두 돌았으니 정답이든 아니든 리턴해줌
        return
    # 자기 자신을 포함시킬 경우
    else:
        list.append(dataset[idx])
        dfs(idx+1, list)
        # 자기 자신을 포함시키지 않을 경우
        list.pop()
        dfs(idx+1, list)

dfs(0, [])
print(answer)


