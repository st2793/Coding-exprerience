출처 : 프로그래머스 ( 코딩테스트 연습 => 2017 팁스타운=> 짝지어 제거하기)

문제 설명
짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다.
그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 
문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.

예를 들어, 문자열 S = baabaa 라면

b aa baa → bb aa → aa →

의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.

제한사항
문자열의 길이 : 1,000,000이하의 자연수
문자열은 모두 소문자로 이루어져 있습니다.
입출력 예
s	result
baabaa	1
cdcd	0
입출력 예 설명
입출력 예 #1
위의 예시와 같습니다.
입출력 예 #2
문자열이 남아있지만 짝지어 제거할 수 있는 문자열이 더 이상 존재하지 않기 때문에 0을 반환합니다.

==================================================================================================




#시간 초과로 망한 케이스.. 
# for문으로 i , i+1 문자열을 비교하니 답은 맞지만 시간초과로 조진케이스..
# 시간이 부족할 땐 스텍을 활용하자. 
'''
def solution(s):
    flag=1
    while s and flag==1:
        flag=0
        for i in range(len(s)-1):
            if s[i]==s[i+1]:
                flag=1
                s=s[:i]+s[i+2:]
                break    
    if s:
        return 0
    else:
        return 1
                
            


# while과 큐를 활용

from collections import deque
def solution(s):
    res=[]
    s=list(map(str,s))
    
    s=deque(s)
    
    while s:
        if not res:
            res.append(s.popleft())
        else:
            tmp=s.popleft()
            if res[-1]==tmp:
                res.pop()
            else:
                res.append(tmp)

    if res:
        return 0
    else:
        return 1
'''


# 더 좋은 풀이. while 문은 n번 반복해야 하지만, for문으로 한큐에 처리하면 복잡도가 줄어든다

def solution(s):
    answer = []
    for i in s:
        if not answer:
            answer.append(i)
        else:
            if answer[-1]==i:
                answer.pop()
            else:
                answer.append(i)
                
    if answer:
        return 0
    else:
        return 1
                
