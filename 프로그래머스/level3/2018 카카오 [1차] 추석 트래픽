# 구현문제. 알고리즘보다 복잡문제해결능력위한 구현능력중요
def solution(lines):
    graphs=[]
    points=[]
    #1. 문자열 자르기 2019-09-015 불필요하니 hh:mm:s1s2.s3s4s5와 0.x1x2x3만 파싱
    for line in lines:
        line=line.split(' ')[1:]
        # S:응답완료시간, T:처리시간
        S=line[0].split(':')
        hh=int(S[0])
        mm=int(S[1])
        ss=float(S[2])
        #ss=int(ss*1000)/1000
        
        #@@ 오답포인트1: 부동소수점 연산에대한 개념이 부족하여헤맸다. 
        #T=int(T*1000)/1000
        #처음에 부동소수점 오차가나와서 당황해서 이런식으로 풀었는데, 옳지못한 풀이다. 왜냐하면 이와같은 접근은 1000을 곱하고 int화하기때문에 소숫점을 잘라버리기떄문에 '반올림'이 아닌 '버림'이기떄문에 혹시모를오차가 생길 수 있다. 
        #부동소수점합 round를 활용하자. github 정리 참고
        
        
        #@@ 오답포인트2: 지문이해부족으로 sp를 찾는과정을 꽤나헤맷다.
        # 최초생각 : sp= (S에 명시된 ep)-T 라고 간단하게 생각했다.
        # 옳은생각 : 카카오문제는 항상 친절하게 놓치기쉬운 반례도 테스트케이스에 넣어주고, 풀이과정도 친절히 알려주는게 포인트다. 여기서도 문제에 이미 힌트가있다. 016-09-15 03:10:33.020 0.011s은 "2016년 9월 15일 오전 3시 10분 33.010초"부터 "2016년 9월 15일 오전 3시 10분 33.020초"까지 "0.011초" 동안 처리된 요청을 의미한다. (처리시간은 시작시간과 끝시간을 포함) => 여기서보면 0.011초 차이를 구하기 위해서 단순히 ep에서 0.011초를 빼는게 아니라, +0.001을해준다. 즉 sp=ep-T+0.001 이라는 것이다. 왜 0.001을 더해줄까? 이유는 sp이상 ep 이하를 만들어주기위해서다. 자연수를 예로들면 sp이상 ep이하에 속하는 자연수의 갯수는 ep-sp+1이 된다. 마찬가지로 여기서도 소숫점셋째자리인 +0.001을 해준것이다. 또한 초단위로 처리하면, 2022년 9월 15일에대한 변동성을 생각하지 않아도된다. 예를 들어 2016-09-15 00:00:00s 2s 인경우, sp는 하루전날인 2016-09-14 23:59:58.001 이 되니 예외처리문자열이 늘어난다. 그러나 초로 전환하면 하루전이 됐든 30일전이 됐든 -S로 표현되므로 신경써지 않아도된다.   
        T=round(float(line[1][:-1])-0.001,3)
        
        
        #2.[[시작1, 끝1], [시작2,끝2]....]로 파싱. 0.001s<=T<=3.000s
        #끝 :  hh:mm:s1s2.s1s2s3
        ep=[hh,mm,ss]
        #@@ 오답포인트3: hh:mm:s1s2.s3s4s5 처리방안 오류 
        # 최초생각 : 문자열을 : 으로 쪼갠뒤 각각의 숫자를 문자열로 인식하려고했다. 이렇게하면, 연산 시 단위를 76분처럼 초과하는경우의수를 각각처리해줘야한다. 총 8개(hh, mm,s1,s2,s3,s4,s5,s6)의 경우의 수가 생기는데, 자릿수 올려줄떄마다 문자와 숫자 타입을 왔다갔다하는 번거로움과 hh,mm은 단위가 60인데비해 s1s2는 합쳐서 60단위, s3~s6는 10단위라는 아주 괴상한 경우가 생긴다. 이런식으로 풀려면 아래와 같은 괴상한 수식이 생기고 예외처리해야한다. 
        #  시작 :  hh:mm:(s1s2.s3s4s5(S)-x1.x2x3x4(T)+0.001)
        
        # 옳은풀이 : 각각의 시분초단위를 초로 환산하자
        # ss-T+0.001,3 반올림처리
        sp=[hh,mm,ss-T]
        
        
        #sp,ep 초단위로 변경
        ep=hh*3600+mm*60+ss
        #@@ 오답포인트4: 과도한 round 활용
        # 최초생각 : 부동소수의 개념이 없다 보니 부동소수점 연산마다 round처리를하면서 이게 맞나 하는생각에 빠졌다.
        # 옳은풀이 : 각각의연산마다 오류가 생길수밖에없으므로 가능하다면 모든 연산마다 round 함수등으로 연산값을 잡아주는것이 좋다. 어차피 소수셋짜리 소수점간의 연산밖에 없기때문이다. 만약에 소수넷째자리+소수 열다섯짜리 합 같이 규칙이없으면,round 가 오히려 더큰 오차를 일으킬수도있으니 유의하자.
        #sp round처리
        sp=round(ep-T,3)
        graphs.append([sp,ep])
        points.append(ep)
        points.append(sp)
    #points 정렬    
    points.sort()
   # print("포인트",points)
    #graphs 시작점 기준으로 정렬. graphs.sort(key=lambda x : (x[0], x[1])) 가 정석임!
    graphs.sort()
    answer = 0
    for point in points:
        #cnt = 포인트구간을 지나는 그래프 수
        cnt=0
        # 특정 point에서 point+1초까지의 합이므로, point의 시작점 = point, point 끝점 = point2로 명명함. 이또한 부동소수간 합이므로 round 처리   
        point2=round(point+1,3)
        # 각각의 포인트의 구간을 지나는 graph가 최대갯수인 합을 구하면답이 나온다.
        for graph in graphs:
            sp,ep=graph
            
            #@@ 오답포인트5: point~point2 구간 범위(문제에대한 이해도 부족)
            # 최초생각 : sp이상 ep이하였으므로,  point 점에서 1더하면 단순하게 point이상 point2이하라고 생각했다. 여기서 맞왜틀???이 시작되서 시간초과를 하게됨..
            # 옳은생각 : 오답포인트2와 동일하다. 문제에 답이있다. 먼저, 1초라는 차이가 있다는 것은 '이상-미만' 또는 '초과-이하'라는 뜻이다. 그러나 point 시작점은 포함되어야하므로 '이상,미만'으로 문제를 풀어나가야 할것이다. 이에대한 반례를 친절하게 테스트케이스3에 넣어놨다. 만약 '이상-이하'라고 생각하여 푼다면 정답은 1이나, 결괏값이 2가 나올것이다. 여기서 또 왜맞틀이 반복된다. 
            
            
            #@@ 오답포인트6: 포인트구간설정을 케이스를 잘못나누었다. 이것은 주석처리된 잘못생각한 코드를 참고하여 보면된다
            # 앞서말했듯이 포인트구간은 point(p1)<=포인트구간<poin+1(p2)
            # 그래프를 실제 그려보고 경우의수를 나눈다. 반드시 직접그리자. 멍청해서 머리고 생각하면 반드시 틀린다..ㅠ
            #if (point<sp and point2>sp) or point==sp or (sp<point<ep) or (ep==point): ===>>>> 케이스를 잘못나눠서 오답이 되버린케이스. 
            # 그담은은 아래코드 작성간 나온 오류코드들이다.
            # 1) if (sp<=point2<=ep)가 아니다. point 이상 point2 미만에 그래프가 접촉해야하므로, 그림을 그려보면 if (sp<point2<=ep) 가된다.  
           # 2) if (sp<point2<=ep) or (sp<=point<=ep) or (point<=sp and point2>=ep): 에서 ""(point<=sp and point2>=ep):" 라고 범위를 잘못나누었다. 마찬가지로 그려보면 왜 잘못 생각했는지 알수있다. 이상 미만이라는 개념이 없었기떄문에!!
            if (sp<point2<=ep) or (sp<=point<=ep) or (point==sp) or (point==ep) or (point<sp and point2>sp):
                cnt+=1
            
            #@@ 오답포인트7 : 잘못된 논리로 불필요한 연산을 break 처리하여 효율성을 높이려다 어긋남. 
            #최초생각: point를 오름차순으로 정렬하였기에, point가 sp보다 커서 그래프와 겹치는 경우만 존재한다고 잘못생각하여, point>sp인경우는 교점이 존재하지않는다는 오류로 break에서 맞왜틀이 시전되었다. 
            #옳은풀이 : 코테에서는 효율성을 올리는 break나 return전에 #효율적으로 정릴할것 표기를 먼저하고 우선 전체계산으로 답을구해보자. 답을 통과하는데 문제없으면 그대로제출하거나, 코드를 주석처리히야 온전히 저장한뒤, 예외처리를 하자. 
            #elif point>sp:
             #   break
            # ==> 생각의오류가 들어갔기에 결과적으로 위 두줄은 주석처리하면되고, points.sort()를 불편한 처리였다.
        answer=max(answer,cnt)

    
    return answer
