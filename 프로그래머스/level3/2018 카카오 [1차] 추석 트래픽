링크 : https://programmers.co.kr/learn/courses/30/lessons/17676

1. 문제유형 : 구현력
구현력문제는 풀이를 떠올리기 어려운 문제가 아니라, 생각한대로 코드를 옮기는데 문제가 있다. 이문제의 경우 이틀에 걸쳐 풀었다.
이유는 범위지정 오류와 float + float 간의 오차가 발생한다는 것을 인지하지 못하였기떄문이다. 



2. 개념(실수값의 오차)  출처 : https://dojang.io/mod/page/view.php?id=2466
매번헤매던 케이스이니 정리를 잘해두자. 
파이썬에서 0.1+0.2는 얼마일까
>>> 0.1 + 0.2
0.30000000000000004
=> 컴퓨터에서는 숫자를 비트로 표현하는데 실수는 유한개의 비트로 정확하게 표현할 수가 없다.
. 이렇게 실수를 근삿값으로 표현하면서 발생하는 문제를 부동소수점 반올림 오차(rounding error)라고 한다.
따라서 다음과같다. 
>>> 0.1 + 0.2 == 0.3
=> False

>>> float(0.1 + 0.2) == 0.3
=> False


그렇다면 어떻게 부동소숫점 또는 순환소수점의 산수계산간의 차이를 없앨까? 방법은 불가능하다.
그저 다음 세가지 방법중 문제에 맞게 활용할 뿐이다.

2.1.) Decimal으로 정확한 자릿수 표현하기(부동소수점만 표현가능)
>>> from decimal import Decimal
>>> Decimal('0.1') + Decimal('0.2')
=> Decimal('0.3')

2.2.) Fraction으로 분수 표현하기(부동소수,순환소수 표현가능)
>>> from fractions import Fraction
>>> Fraction('10/3')    # 10을 3으로 나누면 순환소수 3.33333...이지만 분수 3분의 10으로 표현
 => Fraction(10, 3)

2.3.) 부동소수의 산수간 자릿수가 n번째로 고정된경우=> round 함수활용하여 근삿값 표현 
 * 소수첫째자리 부동소수간의 합을 표현하고싶은경우
>> 0.1 +0.2
=> 0.30000000000000004
>> round(0.1+0.2,2)
=> 0.3

다음과 같이 소수첫째자리 부동소수 변수간의 합만 구한다고 한다면 오차는 저~~~멀리있는 0.kxxxxxxxxxxxxxn 언저리쯤되니까 round를 활용할 수 있다. 
이번문제에서 활용할예정!! 아무리봐도 Decimal과 Fraction은 boolean으로 밖에 쓸수가 없는것같다.. 
