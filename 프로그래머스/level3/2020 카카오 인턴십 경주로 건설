1. 문제해결전략 : DFS와 BFS를 활용하여 푸는문제. 누누히 말하지만, 구상을하는것은 DFS가 더 익숙하지만, 효율성으로 따지면, BFS로 풀어야한다. 
                  이문제가 특히 DFS만 발상하면 시간초과로 틀리는 문제였다. dy를 활용하여 가지치기를 잘하는게 관건!
                  즉 DFS+dy or BFS+dy로 풀어야한다. 
                  (실제로 구글링이나 프로그래머스 올라온 소스코드들 대다수가 추가된 테스트케이스를 통과못하니 잘 선별하자.)
 
 =============================================================================================================================================
 2. 내오답 풀이(DFS)
# 앞서말했듯이 DFS로 풀수있는 문제발상은 가능하면 BFS로 풀자. 시간초과로 두번고생안한다..
# 이 문제를 풀지전 시간초과일수 밖에 없는이유를 BigO로 설명해줄수있는사람?? 증명할줄알아야하며, 증명못하면 bfs로 풀어야하는 문제라고 생각하자.
directions=[[-1,0],[0,1],[1,0],[0,-1]]

def solution(board):
    res=217000000
    dy=[]
    n=len(board)
    for _ in range(n):
        dy.append([50000 for _ in range(n)])    
    def DFS(y,x,direction,cost):
        nonlocal res
        if cost>=res:
            return
        if y==n-1 and x==n-1:
            res=min(res,cost)
            return

        else:    
            for i in range(4):
                yy=y+directions[i][0]
                xx=x+directions[i][1]

                if 0<=yy<n and 0<=xx<n and board[yy][xx]==0:
                    board[yy][xx]=1
                    #직선거리100 획득상황
                    if i==direction :
                        
                        DFS(yy,xx,direction,cost+100)
                    #직선거리 100 +코너500 획득상황
                    else:
                         DFS(yy,xx,i,cost+600)
                    board[yy][xx]=0
             
    n=len(board)
    board[0][0]=1
    DFS(0,0,1,0)
    DFS(0,0,2,0)
    return res    
=> 패착은 시간초과이다. 모든 케이스를 돌기때문에 허점은 없지만, 효율성에서 틀릴수밖에없다.

==============================================================================================================================
 3. 내오답 풀이(BFS)
# 패착요인1 : bfs로 조건문 세분화하는 법을 모르겠음. 조건문이 명확하게 나누지 못해 계속틀림. bfs 기초문제부터 원리를익혀야한다. 
# 패착요인2 : 꺾이는 부분이 직선보다 비용이 적은 경우를 전혀 고려못하고 있는 알고리즘이다. 에이설마..? 라고 생각했는데 확실하지 않으면 조건문포함해서 증명해야한다. 
# 물론 패착요인1에의해 이미 멘탈이 나가서 고려해야한다는것만알았지, 실제로 코드에 녹일 엄두는 못냈다.
from collections import deque
def solution(board):
    n=len(board) 
    isVisited=[]
    for _ in range(n):
        isVisited.append([0 for _ in range(n)])
   
    directions=[[1,0],[0,1],[-1,0],[0,-1]]
    dq=deque([[0,0,0,-500],[0,0,1,-500]])
    isVisited[0][0]=1
    ans=2170000000
    while dq:
        y,x,d,cost=dq.popleft()
        if cost>=ans:
            pass
        elif y==n-1 and x==n-1:
            ans=min(ans,cost)
        
        else:
            yy=y+directions[d][0]
            xx=x+directions[d][1]
            # 1.방향전환없이 갈수있으면 직진하자. (여기서 어떤부분을 조건문으로 잡을지 머리로만 생각하니, 4시간 넘게 수정하였지만 틀려버림.. 손으로 필기하며 조건나누자)
            if 0<=yy<n and 0<=xx<n and board[yy][xx]!=1 and isVisited[yy][xx]==0:
                isVisited[yy][xx]=1
                if board[yy][xx]==0:
                    board[yy][xx]=board[y][x]+100
                else:
                    board[yy][xx]=min(board[yy][xx],board[y][x]+100)
                dq.append([yy,xx,d,cost+100])  

            # 2.방향전환이 필요한경우 (여기서 어떤부분을 조건문으로 잡을지 머리로만 생각하니, 4시간 넘게 수정하였지만 틀려버림.. 손으로 필기하며 조건나누자)
            else:
                for k in range(4):
                    yy=y+directions[k][0]
                    xx=x+directions[k][1]
                    if 0<=yy<n and 0<=xx<n and board[yy][xx]!=1 and isVisited[yy][xx]==0:
                        
                        isVisited[yy][xx]=1
                        if board[yy][xx]==0:
                            board[yy][xx]=board[y][x]+600
                        else:
                            board[yy][xx]=min(board[yy][xx],board[y][x]+600)
                        d=k
                        dq.append([yy,xx,k,cost+600])  
                        break
    for x in board:
        print(x)
    return board[n-1][n-1]
=> 본인이 나누는 조건절을 명확히 못하니, 당연히 답이 틀릴수밖에없음. 
===================================================================================================================================================================
3.1. 내 풀이 보다 조금 더나아간 오답(BFS)

from collections import deque

def solution(board):
    di = [0, 1, 0, -1]
    dj = [1, 0, -1, 0]
    N = len(board)
    visited = [[-1] * N for _ in range(N)]
    Q = deque()
    Q.append([0, 0, 0, 0])
    Q.append([0, 0, 0, 1])
    visited[0][0] = 0
    while Q:
        now_cost, i, j, d = Q.popleft()
        for k in range(4):
            yy = i + di[k]
            xx = j + dj[k]

            # 경계체크. 벗어난 건 무시
            if yy < 0 or xx < 0 or yy >= N or xx >= N:
                continue
            # 벽체크. 벽이면 무시
            if board[yy][xx] == 1:
                continue
            # 뒤로가기 체크 직진하지 않으면 무시 => 반드시 양의방향으로만 나아간다는 보장이 없으므로 논리가 틀림.
            if abs(k-d) == 2:
                continue
            cost = 100 if k == d else 600
            new_cost = now_cost + cost
            #나보다 좋은 풀이인 이유 : 한번지나갔는지 flag(visited) 값을 음수로 두고, 한번지나간 경우는 new_cost값중작은값으로 최소하하여 표현함
            #-> 즉  visited[yy][xx]식에 방문여부(flag)+ new_cost(dy)값의 갱신을 동시에 표현함. 
            if visited[yy][xx] == -1 or new_cost <= visited[yy][xx]:
                visited[yy][xx] = new_cost
                Q.append([new_cost, yy, xx, k]) 

    return visited[N-1][N-1]
    => 테스트케이스 25번만 불통
    =>  new_cost가 visited[yy][xx]보다 크더라도 (yy, xx)의 다음 좌표로 이동할 때의 cost가 new_cost + 100 < visited[yy][xx] + 600일 수 있는데,
        이 경우가 고려가 안 되기에 테스트 25문제는 불통하게되었다! 꺾이는 부분이 직선보다 더 비용이 많아지는 관계를 생각안한 문제풀이임.
================================================================================================================================================================

4. DFS 정답풀이 
# 출처 : https://taxijjang.tistory.com/87
# 패착 : DFS는 가지치기(백트래킹)를 잘해야하는데, 능력부족으로 더 쳐야할 곳을 못찾음. 
# dfs를 통하여 종점까지 탐색을 하고, dp를 이용하여 도로의 최솟값을 계속 갱신하면 시간안에 값을 유추할 수 있다

INF = 2222222222
d = [(-1, 0), (0, 1), (1, 0), (0, -1)]

#dp_size = 25는 문제 제한사항임.
dp_size = 25
dp = [[INF] * dp_size for _ in range(dp_size)]
visited = [[False] * dp_size for _ in range(dp_size)]

# 0 위로 직진, 1 오른쪽으로 직진, 2 아래로 직진, 3 왼쪽으로 직진
direct = [0, 1, 2, 3]


def solution(board) :
    dp[0][0] = 0
    #for dir, dd in enumerate(d):
    #    print(dir, dd[0], dd[1])
    # dfs(x,y,dir,board)
    dfs(0, 0, 1, board)
    dfs(0, 0, 2, board)

    return dp[len(board) - 1][len(board) - 1]


def dfs(h_x, h_y, h_dir, board) -> None:
    for dir, dd in enumerate(d):
        n_x, n_y = h_x + dd[0], h_y + dd[1]
        n_dir = direct[dir]
        n_cost = cost_calc(h_dir, n_dir)
        if n_x < 0 or n_x >= len(board) or n_y < 0 or n_y >= len(board) or board[n_x][n_y] == 1:
            continue
        # 가장중요! 
        if dp[n_x][n_y] < dp[h_x][h_y] + n_cost:
            continue
        #dp[n_x][n_y] >= dp[h_x][h_y] + n_cost 인경우임.
        dp[n_x][n_y] = dp[h_x][h_y] + n_cost
        dfs(n_x, n_y, n_dir, board)


def cost_calc(h_dir, n_dir) -> int:
    # 직선일때 cost
    if h_dir == n_dir:
        return 100

    # 코너를 돌때 cost
    else:
        return 600

====================================================================================================================================
5. BFS 정답풀이 
# 출처 :  https://unho94.tistory.com/m/130 참조
#패착요인1 : 직진 꺾은선 최대차이만큼 고려해야됨을 알고있었으면서. 여기까지 조건처리해야되나 의구심을 가짐. 그리고 구현력이 약하기때문에 틀림. 
#패착요인2 : 구현력부족. 필기를하며 풀었다면 더 정답가능성 높았음. 내가하고자한 풀이를 믹스하면 결국 이풀이였을 것임.

def solution(board):
    dr = [-1, 0, 1, 0]                      # 상 우 하 좌
    dc = [0, 1, 0, -1]
    N = len(board)                          # 보드판의 길이
    cost = [[1e10] * N for _ in range(N)]   # 각 좌표로 이동하는데 발생하는 비용

    def BFS():
        q = deque([(0, 0, 0, -1)])          # 행 열 좌표, 해당 좌표로 오는데 발생한 비용, 이전에 진행하던 방향
        cost[0][0] = 0                      # 시작 좌표는 비용이 없음

        while q:
            y, x, price, d = q.popleft()
            
            for k in range(4):              # 4 방향 모두 탐색
                r = y + dr[k]
                c = x + dc[k]

                if 0 <= r < N and 0 <= c < N and board[r][c] != 1:          # 범위내이고 벽이 아니라면
                    if (d == -1 or d == k) and price + 100 <= cost[r][c]:   # 초기 시작이거나 방향이 같을때, 다음 좌표가 100 비용이 늘어나더라도, 지금의 경우가 더 낮은 비용일떄
                        cost[r][c] = price + 100
                        q.append((r, c, price + 100, k))                    
                    elif price + 600 <= cost[r][c] + 200:                   # 방향이 다르고, 추가적인 비용이 400 이하로 차이가 날때 (예외 상황)
#############################################################
# 1.이해안가는 부분 1: 왜 400이하로 차이가 날때를 구한건지 이해가안감..

                        
'''
#########################################################################
1.이해안가는 부분 2:

초기에 비용에 관련된 부분을 기록하였고, 그것보다 낮은 비용이 발생시에만 새로 갱신하였다.

그러나 특정 상황 어떠한 좌표에서 더 높았던 비용의 루트가 최종적으로 더 낮아지는 비용의 루트가 발생하게 되는 상황이 발견되었다.

(ex.

1번 루트 - 직진(1, 3, 100) => 직각(1, 3, 200) => 직진(2, 3, 800) => 직진(3, 3, 900),

2번 루트 - 직진(2, 2, 500) => 직각(2, 3, 600) => 직진(3, 3, 1200) 위의 두가지 루트는 2,3 에서 2번 루트가 더 낮은 가격이지만, 결과적으로 3, 3에 도착하였을때는 1번 루트가 더 낮은 가격이 되어서, 1번루트를 선택하여야 합니다.)
'''   


                        cost[r][c] = price + 600
                        q.append((r, c, price + 600, k))

    BFS()

    return cost[N-1][N-1]       # 도착지점 비용 출력
    
